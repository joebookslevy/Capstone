Capstone Text Prediction App
========================================================
author: JoeBooksLevy
date: January 24, 2016

Background Context
========================================================

- Lots of people take advantage of technology for text prediction. Most common to folks is text prediction for cell phone applications with messaging. Data scientists may use natural language processing and prediction algorithm skills for greater data applications.
- For the Coursera Data Science Capstone, Swiftkey provided sample US news, blogs, and Twitter data to utilize for students to build an application. I used this data set to build a simple text prediction application.
- While a simple application, the process and application serve as an example to build off of for larger applications or data implications.

My Process 
========================================================

- First, I downloaded, cleaned, and explored the data set.
- I then looked for the most common single-word, two-word, and three-word phrases from the data sets, creating n-grams.
- I used the n-grams as the foundation for the prediction algorithm. As a two-word phrase is entered in the application, 
it is checked against most common three-word phrases to predict the third associated word. If no matches are found, the phrase is checked against two-word and one-word phrases to identify most likely terms to come next. 

My Application (Access & How It Works)
========================================================

- My ShinyApp can be found here: https://joebookslevy.shinyapps.io/Capstone/
- As a two-word phrase is entered, the input is cleaned and prepared to be searched against n-gram data (e.g., removing punctuation, making text all lower case).
- Once cleaned, the phrase is checked against most common three-word phrases to predict the third associated word. 
- If no matches are found, phrase is checked against two- and one-word phrases for likely term match.
- The result is the best matched/predicted one-to-three words, since single word prediction may not be most accurate.

Limitations & Possibilities 
========================================================

- I initially designed a more accurate application using more example text. Unfortunately, my app/site crashed due to too much memory being used. When using less data to build my model, the app/site would work, but the prediction was less accurate.
- The lack of accuracy is a general limitation. Even Swiftkey - a company specializing in text prediction - is not perfect, so my attempt at an algorithm may not always meet the need of inputs.
- Given these limitations, there is ample possibility for enhancement of the application for its given purpose. More sophisticated/efficient coding could produce a more accurate app. Moreover, implications and more advanced applications of the logic here could help predict behavior or better analyze text for other data needs.