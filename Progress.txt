https://joebookslevy.shinyapps.io/Capstone/

http://127.0.0.1:6820/

shinyapps::setAccountInfo(name='joebookslevy', token='B91A9AE8EDEED029481221FC40B94712', secret='Pm0/VlR0Hkztfjw0GrxVZxMpPjuvur8Mu+8sn196')




Tried adding in suggest function
phrase <- iconv(phrase, sub="")

Also tried adding in clean input function
word<- iconv(word, sub="")




SERVER.R

library(shiny)
library(UsingR)
setwd("C:/Users/jdlevy/Documents/datasciencecoursera/10_Capstone/final/Capstone")
shinyServer(
  function(input, output) {
    output$text1<- renderText({
      input$goButton
      suggest(input$text1)}) ##List of 1-5 predicted words based on data set
  }
)

UI.R
shinyUI(fluidPage(
  headerPanel("Text Prediction"),
  sidebarPanel(
   textInput("text1", label="Enter two words"),
   actionButton("gobutton","Submit") 
   ),
  mainPanel(
    h5('This application is built to demonstrate a text prediction algorithm. 
        The algorithm is based off of a sample of US news, blogs, and twitter 
        content. Enter two words (of a phrase, beginning of a sentence, etc.) 
        and the algorithm will return the top 1-3 predicted next words based on 
        your entry compared against likely phrases from the sample data set. 
        The model can take approximately 15 seconds to respond for the first
        prediction (as it is loading data sets, running the algorithm). Entries
        after that should return predictions within a few seconds. Know that 
        while the model is based on thousands upon thousands of data entries, 
        the accuracy is far from perfect.'),
    hr(),
    h4('Top Predicted Next Words'),
    hr(),
    h4(textOutput("text1")),
    hr()
  )
))


GLOBAL.R

library(shiny)
library(UsingR)
library(stringr)
setwd("C:/Users/jdlevy/Documents/datasciencecoursera/10_Capstone/final/Capstone")
uni<-read.table("unigram.csv.gz")
bi<-read.table("bigram.csv.gz")
tri<-read.table("trigram.csv.gz")

##Set up function to clean input from user
cleanInput <-function(input) {
  word <- tolower(input) #ensure input is in lower case
  word <- gsub("[^[:alnum:][:space:]\']", "",word) ##Remove numbers
  word <- gsub("[[:punct:]]", "",word) ##Remove punctuation
  word <- gsub("^[ ]{1,10}","",word)
  word <- gsub("[ ]{2,10}"," ",word)
  return(word)
}

suggest<-function(input){
  inputs<-cleanInput(input)  ##Cleans input and classifies it as input
  phrase<-paste("^",inputs,sep="") ##Preps input to be beginning of phrase
  test<-grep(phrase, tri$Trigram, value=TRUE) ##Find trigrams beginning with input
  
  nCount<-length(grep(phrase, tri$Trigram, value=FALSE))
  if (nCount==0) {    ##If trigram phrase isn't found, look at bigrams
    one<-word(phrase, -1) ##Drop first word in phrase
    test2<-grep(one, bi$Bigram, value=TRUE) ##Search bigrams with last word in entered phrase
    iso1<-word(test2,-1) ##Obtain last word in found bigram phrases, which would be next word
    pred<-iso1[1:3]
    return(pred)   ##List of 1-5 predicted words based on data set
  } else {
    
    iso<-word(test,-1) ##Obtain last word in trigram phrases
    tt1<-iso[1]   ##Pull the top 5 of those
    tt2<-iso[2]
    tt3<-iso[3]
    predd1<-which(uni$Onegram==tt1)  ##identify row number of word in unigram list
    predd2<-which(uni$Onegram==tt2)  ##to help see which occurs more frequently
    predd3<-which(uni$Onegram==tt3)
    ll<-as.data.frame(list(c(predd1, predd2, predd3))) ##Combine numbers as df
    colnames(ll)<-c("Position")  ##Set up df to sort
    sorted2<-sort(ll$Position, decreasing=FALSE)  ##Sort df
    words2<-uni$Onegram[sorted2]  ##Use df values to find unigrams 
    pred2<-as.character(words2)   ##Prepare to list as predicted words
    return(pred2)   ##List of 1-5 predicted words based on data set
    
  }
}





--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------


library(shiny)
library(UsingR)
library(qdap)
library(stringr)
setwd("C:/Users/jdlevy/Documents/datasciencecoursera/10_Capstone/final/Capstone")
uni<-read.table("unigram.csv.gz")
bi<-read.table("bigram.csv.gz")
tri<-read.table("trigram.csv.gz")

##Set up function to clean input from user
cleanInput <-function(input) {
  word <- tolower(input) #ensure input is in lower case
  word <- gsub("[^[:alnum:][:space:]\']", "",word) ##Remove numbers
  word <- gsub("[[:punct:]]", "",word) ##Remove punctuation
  word <- gsub("^[ ]{1,10}","",word)
  word <- gsub("[ ]{2,10}"," ",word)
  return(word)
}

suggest<-function(input){
  inputs<-cleanInput(input)  ##Cleans input and classifies it as input
  phrase<-paste("^",inputs,sep="") ##Preps input to be beginning of phrase
  test<-grep(phrase, tri$Trigram, value=TRUE) ##Find trigrams beginning with input
  
  nCount<-length(grep(phrase, tri$Trigram, value=FALSE))
  if (nCount==0) {    ##If trigram phrase isn't found, look at bigrams
    one<-word(phrase, -1) ##Drop first word in phrase
    test2<-grep(one, bi$Bigram, value=TRUE) ##Search bigrams with last word in entered phrase
    iso1<-word(test2,-1) ##Obtain last word in found bigram phrases, which would be next word
    pred<-iso1[1:3]
    return(pred)   ##List of 1-5 predicted words based on data set
  } else {
    
    iso<-word(test,-1) ##Obtain last word in trigram phrases
    tt1<-iso[1]   ##Pull the top 5 of those
    tt2<-iso[2]
    tt3<-iso[3]
    predd1<-which(uni$Onegram==tt1)  ##identify row number of word in unigram list
    predd2<-which(uni$Onegram==tt2)  ##to help see which occurs more frequently
    predd3<-which(uni$Onegram==tt3)
    ll<-as.data.frame(list(c(predd1, predd2, predd3))) ##Combine numbers as df
    colnames(ll)<-c("Position")  ##Set up df to sort
    sorted2<-sort(ll$Position, decreasing=FALSE)  ##Sort df
    words2<-uni$Onegram[sorted2]  ##Use df values to find unigrams 
    pred2<-as.character(words2)   ##Prepare to list as predicted words
    return(pred2)   ##List of 1-5 predicted words based on data set
    
  }
}

shinyServer(
  function(input, output) {
    output$text1<- renderText({
      input$goButton
      suggest(input$text1)}) ##List of 1-5 predicted words based on data set
  }
)